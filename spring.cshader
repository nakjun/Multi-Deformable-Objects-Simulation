#version 430

struct SPINFOR
{
	vec4 SP_INFOR;
	vec4 SP_INDEX;
};

// Target 0 : Vertex position
layout(std430, binding = 0) buffer Pos {
   vec4 Positions[];
};

// Target 1 : Vertex velocity
layout(std430, binding = 1) buffer Vel {
    vec4 Velocities[];
};

// Target 2 : Vertex velocity
layout(std430, binding = 2) buffer Spring {
	SPINFOR SP[];	
};

//Target 4 :Particle Force
layout(std430, binding =3)  buffer NodeForce{
	vec4 Node_Force[];
};

layout (local_size_x = 512) in;

// Object's Vertex Count
uniform int SpringCount;
uniform int VertexCount;

void main() {
	
	uint index= gl_GlobalInvocationID.x;

	if(index>=SpringCount) return;

	float ks = 45000.0;
	float kd = 0.002;

	vec3 information = SP[index].SP_INFOR.xyz;
	vec3 spIndex = SP[index].SP_INDEX.xyz;
		
	int newIndex1 = int(spIndex.x);
	int newIndex2 = int(spIndex.y);

	int m1 = int(information.x);
	int m2 = int(information.y);
	float mRestLen = information.z;

	vec3 vP1 = Positions[m1].xyz; 
	vec3 vP2 = Positions[m2].xyz; 

	vec3 vV1 = Velocities[m1].xyz; 
	vec3 vV2 = Velocities[m2].xyz; 

	vec3 forceDirection = vP2-vP1;
	vec3 VelocityDirection = vV2-vV1;
	
	forceDirection=normalize(forceDirection);

	float len=(vP2.x-vP1.x)*(vP2.x-vP1.x)+(vP2.y-vP1.y)*(vP2.y-vP1.y)+(vP2.z-vP1.z)*(vP2.z-vP1.z);	
	len = sqrt(len);

	float spforce = (len-mRestLen)*ks;
	float damp = (dot(VelocityDirection, forceDirection)/len)*kd;
				
	vec3 nSPF = (spforce + damp) * forceDirection / len;

	Node_Force[newIndex1].xyz = nSPF.xyz;
	Node_Force[newIndex2].xyz = -nSPF.xyz;	
}
