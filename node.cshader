#version 430

struct BoundingBox
{
   vec3 Min;
   vec3 Max;   
   int Objectindex; 
   int CurrLevel;
   int ParentLevel; 
};

// Target 0 : Vertex position
layout(std430, binding = 0) buffer Pos {
   vec4 Positions[];
};

// Target 12 : Previous Vertex position
layout(std430, binding = 12) buffer PrevPos {
   vec4 PrevPositions[];
};

// Target 1 : Vertex velocity
layout(std430, binding = 1) buffer Vel {
    vec4 Velocities[];
};

// Target 13 : Vertex Prev velocity
layout(std430, binding = 1) buffer PrevVel {
    vec4 PrevVelocities[];
};


//Target 4 :Particle Force
layout(std430, binding =3)  buffer NodeForce{
	vec4 Node_Force[];
};

//Target 6 : Bounding Box Collision Result
layout(std430, binding =5)  buffer Res{
	vec4 BB_RES[];
};

// Target 6 : Vertex Normal
layout(std430, binding = 6) buffer NormalB {
   vec4 Normal[];
};

layout(std430, binding =8)  buffer ObjectInformation{
	vec4 O_Infor[];
};

layout (local_size_x = 512) in;

// Object's Vertex Count
uniform int VertexCount;

float dt=0.0001;

vec3 externalForce = vec3(0.0);
vec3 gravity = vec3(0.0f, -9.8f,0.0);

void main() {
	
	uint index = gl_GlobalInvocationID.x;
	
	if(index>=VertexCount) return;

	// 위치와 속도 읽기
	vec3 vPos = Positions[index].xyz;
	vec3 vVel = Velocities[index].xyz;	

	// Prev Position, Prev Velocity 저장
	PrevPositions[index].xyz = vPos;
	PrevVelocities[index].xyz = vVel;
		
	int obj = int(Positions[index].w);
	
	// Node에 적용되는 Spring Force 불러오기
	vec3 Force = Node_Force[index * 30 + 30].xyz;
		
	// Apply Euler Method
	vec3 a = gravity + Force/1.0f;	
	vVel.xyz += a * dt ;
	vPos.xyz += vVel.xyz * dt;
	    
	//Collision with Floor
	if(vPos.y<-1.0000)
	{     
		vec3 v = vVel.xyz;
		v.y *= -0.85;
		vVel.xyz = v;

		vec3 p1 = vPos.xyz;
		p1.y = -0.9999999;
		vPos.xyz = p1;
	}
	
    //Status Update   
    Positions[index].xyz = vPos;   
    Velocities[index].xyz = vVel;	
}