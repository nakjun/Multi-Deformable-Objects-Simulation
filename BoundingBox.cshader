#version 430

// Target 0 : Vertex position
layout(std430, binding = 0) buffer Pos {
   vec4 Positions[];
};

// Target 5 : Bounding Box Min
layout(std430, binding = 5) buffer Infor1 {
    vec3 BB_INFOR1[]; 
};

// Target 10 : Bounding Box Max
layout(std430, binding = 10) buffer Infor2 {
    vec3 BB_INFOR2[]; 
};

//Target 6 : Bounding Box Collision Result
layout(std430, binding =6)  buffer Res{
	vec4 BB_RES[];
};

layout (local_size_x = 2,local_size_y=2) in;

// Object's Vertex Count
uniform int VertexCount;

float check(vec3 min1,vec3 min2,vec3 max1,vec3 max2){
	if (max1.x < min2.x || min1.x > max2.x) return 0.0;
	if (max1.y < min2.y || min1.y > max2.y) return 0.0;
	if (max1.z < min2.z || min1.z > max2.z) return 0.0;
	return 1.0;
}

void main() {
	uint index1= gl_GlobalInvocationID.x;
	uint index2= gl_GlobalInvocationID.y;	

	float newIndex1 = index2 * 2 + index1;
	float newIndex2 = index1 * 2 + index2;

	vec3 minTmp;
	vec3 maxTmp;
	
	if(index1==0){
		minTmp = Positions[0].xyz;
		maxTmp = Positions[0].xyz;
		for(int i=0;i<733;i++)
		{		
			if (minTmp.x > Positions[i].x) minTmp.x = Positions[i].x;
			if (minTmp.y > Positions[i].y) minTmp.y = Positions[i].y;
			if (minTmp.z > Positions[i].z) minTmp.z = Positions[i].z;

			if (maxTmp.x < Positions[i].x) maxTmp.x = Positions[i].x;
			if (maxTmp.y < Positions[i].y) maxTmp.y = Positions[i].y;
			if (maxTmp.z < Positions[i].z) maxTmp.z = Positions[i].z;
		}
	}
	else
	{
		minTmp = Positions[733].xyz;
		maxTmp = Positions[733].xyz;
		for(int i=733;i<VertexCount;i++)
		{		
			if (minTmp.x > Positions[i].x) minTmp.x = Positions[i].x;
			if (minTmp.y > Positions[i].y) minTmp.y = Positions[i].y;
			if (minTmp.z > Positions[i].z) minTmp.z = Positions[i].z;

			if (maxTmp.x < Positions[i].x) maxTmp.x = Positions[i].x;
			if (maxTmp.y < Positions[i].y) maxTmp.y = Positions[i].y;
			if (maxTmp.z < Positions[i].z) maxTmp.z = Positions[i].z;
		}
	}

	BB_INFOR1[index1] = minTmp;
	BB_INFOR2[index1] = maxTmp;


	if(index2==0){
		minTmp = Positions[0].xyz;
		maxTmp = Positions[0].xyz;
		for(int i=0;i<733;i++)
		{		
			if (minTmp.x > Positions[i].x) minTmp.x = Positions[i].x;
			if (minTmp.y > Positions[i].y) minTmp.y = Positions[i].y;
			if (minTmp.z > Positions[i].z) minTmp.z = Positions[i].z;

			if (maxTmp.x < Positions[i].x) maxTmp.x = Positions[i].x;
			if (maxTmp.y < Positions[i].y) maxTmp.y = Positions[i].y;
			if (maxTmp.z < Positions[i].z) maxTmp.z = Positions[i].z;
		}
	}
	else
	{
		minTmp = Positions[733].xyz;
		maxTmp = Positions[733].xyz;
		for(int i=733;i<VertexCount;i++)
		{		
			if (minTmp.x > Positions[i].x) minTmp.x = Positions[i].x;
			if (minTmp.y > Positions[i].y) minTmp.y = Positions[i].y;
			if (minTmp.z > Positions[i].z) minTmp.z = Positions[i].z;

			if (maxTmp.x < Positions[i].x) maxTmp.x = Positions[i].x;
			if (maxTmp.y < Positions[i].y) maxTmp.y = Positions[i].y;
			if (maxTmp.z < Positions[i].z) maxTmp.z = Positions[i].z;
		}
	}

	BB_INFOR1[index2] = minTmp;
	BB_INFOR2[index2] = maxTmp;

	if(index1!=index2){
		float res = check(BB_INFOR1[index1],BB_INFOR1[index2],BB_INFOR2[index1],BB_INFOR2[index2]);
	
		BB_RES[int(newIndex1)].x = res;
		BB_RES[int(newIndex2)].x = res;
	}
	else
	{
		BB_RES[int(newIndex1)].x = 0.0;
		BB_RES[int(newIndex2)].x = 0.0;
	}
}