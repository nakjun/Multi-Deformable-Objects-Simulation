#version 430
// 0 : Node Position, 1 : Node Velocity, 2 : Spring Information, 3 : Node Force, 4 : BBInformation, 5 : BBResult, 6 : Normal, 7 : Face Information
struct BoundingBox
{
   vec4 Min;
   vec4 Max;   
   vec4 data;   
};

struct FaceInformation
{
	vec4 FaceNodeIndex;
	vec4 FaceNodeLocation;
};

// Target 4 : Bounding Box Information
layout(std430, binding = 4) buffer BBInfor {
    BoundingBox BB_INFOR[]; 
};

//Target 5 : Bounding Box Collision Result
layout(std430, binding =5)  buffer Res{
	vec4 BB_RES[];
};

// Target 6 : Vertex Normal
layout(std430, binding = 6) buffer NormalB {
   vec4 Normal[];
};

//Target 8 : ObjectInformation
layout(std430, binding =8)  buffer OBJECT{
	vec4 ObjectInformation[];
};

//Target 11 : Masking Table
layout(std430, binding =11)  buffer Mask{
	int MaskResult[];
};

//Target 7 : Face INformation
layout(std430, binding =7)  buffer FACE{
	FaceInformation Face_Information[];	
};

// Target 9 : Bounding Box Face Information
layout(std430, binding = 9) buffer BB_Face {
    vec4 BBFaceList[]; 
};

int check(vec3 min1,vec3 min2,vec3 max1,vec3 max2){		
	if(max1.x > min2.x && min1.x < max2.x && max1.y > min2.y && min1.y < max2.y &&
    max1.z > min2.z && min1.z < max2.z) return 1;
	return 0;	
}

layout (local_size_x = 16, local_size_y = 16) in;

uniform int wholeBBcount;

void main()
{	
	//INVOKED BOUNDING BOX INDEX(x,y)
	uint index1= gl_GlobalInvocationID.x;
	uint index2= gl_GlobalInvocationID.y;		
	
	//BB가 소속된 OBJECT의 INDEX를 가져옴
	int BBINDEX1 = int(BB_INFOR[index1].data.x);
	int BBINDEX2 = int(BB_INFOR[index2].data.x);
	
	MaskResult[index1*wholeBBcount + index2] = 0;

	if(BBINDEX1==BBINDEX2)		return;
	if(index1<index2) return;

	//충돌 검사 수행 및 결과 저장
	int res = check(BB_INFOR[index1].Min.xyz,BB_INFOR[index2].Min.xyz,BB_INFOR[index1].Max.xyz,BB_INFOR[index2].Max.xyz);		
	
	//MASKRESULT SSBO에 결과 값 저장
	MaskResult[index1*wholeBBcount+index2] = res;
	
}

