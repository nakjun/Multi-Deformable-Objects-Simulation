#version 430

layout( local_size_x = 32, local_size_y = 32) in;

struct FaceInformation
{
	vec4 FaceNodeIndex;
	vec4 FaceNodeLocation;
};

// Target 0 : Vertex position
layout(std430, binding=0) buffer PosIn {
  vec4 PositionIn[];
};

// Target 1 : Vertex velocity
layout(std430, binding = 1) buffer Vel {
    vec4 Velocities[];
};

layout(std430, binding=7) buffer FaceInfor {
  FaceInformation Face_Information[];  
};

// Target 9 : Bounding Box Face Information
layout(std430, binding = 9) buffer BB_Face {
    vec4 BBFaceList[]; 
};

layout(std430, binding=10) buffer Pairwise {
  vec4 FacePairwise[];
};

//Target 11 : Masking Table
layout(std430, binding =11)  buffer Mask{
	int MaskResult[];
};

uniform int Offset;
uniform int FaceOffset;
uniform int obj2facecount;

vec3 f1_norm[3];
vec3 f2_norm[3];
vec3 rv_f1[3];
vec3 rv_f2[3];
vec3 f1_center;
vec3 f2_center;
vec3 normDiff;

void main() {
  
	uint idx_x = gl_GlobalInvocationID.x;  
	uint idx_y = gl_GlobalInvocationID.y + Offset; 
    
	vec4 BB1 = BBFaceList[idx_x];
	vec4 BB2 = BBFaceList[idx_y];

	int bbindex1 = int(BB1.y);
	int bbindex2 = int(BB2.y);

	int faceIndex1 = int(BB1.x);
	int faceIndex2 = int(BB2.x) + FaceOffset;    

	if(MaskResult[bbindex1*64+bbindex2]!=1)	return;	
	if(FacePairwise[faceIndex1*obj2facecount+faceIndex2].z!=1.0) return;
	
	FacePairwise[faceIndex1*obj2facecount+faceIndex2].z = 0.0;

	vec3 faceA = Face_Information[faceIndex1].FaceNodeIndex.xyz;
	vec3 faceB = Face_Information[faceIndex2].FaceNodeIndex.xyz;

	f1_norm[0] = normalize(Velocities[int(faceA.x)].xyz);
	f1_norm[1] = normalize(Velocities[int(faceA.y)].xyz);
	f1_norm[2] = normalize(Velocities[int(faceA.z)].xyz);

	f2_norm[0] = normalize(Velocities[int(faceB.x)].xyz);
	f2_norm[1] = normalize(Velocities[int(faceB.y)].xyz);
	f2_norm[2] = normalize(Velocities[int(faceB.z)].xyz);

	f1_center = vec3((PositionIn[int(faceA.x)].x + PositionIn[int(faceA.y)].x + PositionIn[int(faceA.z)].x)/3.0,
						(PositionIn[int(faceA.x)].y + PositionIn[int(faceA.y)].y + PositionIn[int(faceA.z)].y)/3.0 ,
						(PositionIn[int(faceA.x)].z + PositionIn[int(faceA.y)].z + PositionIn[int(faceA.z)].z)/3.0);

	f2_center = vec3((PositionIn[int(faceB.x)].x + PositionIn[int(faceB.y)].x + PositionIn[int(faceB.z)].x)/3.0,
						(PositionIn[int(faceB.x)].y + PositionIn[int(faceB.y)].y + PositionIn[int(faceB.z)].y)/3.0 ,
						(PositionIn[int(faceB.x)].z + PositionIn[int(faceB.y)].z + PositionIn[int(faceB.z)].z)/3.0);

	normDiff = normalize(f2_center-f1_center);

	rv_f1[0] = 2 * dot(normDiff,f1_norm[0]) * normDiff - f1_norm[0];
	rv_f1[1] = 2 * dot(normDiff,f1_norm[1]) * normDiff - f1_norm[1];
	rv_f1[2] = 2 * dot(normDiff,f1_norm[2]) * normDiff - f1_norm[2];

	rv_f2[0] = 2 * dot(normDiff,f2_norm[0]) * normDiff - f2_norm[0];
	rv_f2[1] = 2 * dot(normDiff,f2_norm[1]) * normDiff - f2_norm[1];
	rv_f2[2] = 2 * dot(normDiff,f2_norm[2]) * normDiff - f2_norm[2];

	
}
